package by.dilik14.quizer;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.EnumSet;

import by.dilik14.quizer.generators.DeadLineTaskGenerator;
import by.dilik14.quizer.generators.GroupTaskGenerator;
import by.dilik14.quizer.generators.PoolTaskGenerator;
import by.dilik14.quizer.generators.math.EquationTaskGenerator;
import by.dilik14.quizer.generators.math.ExpressionTaskGenerator;
import by.dilik14.quizer.tasks.TextTask;
import by.dilik14.quizer.tasks.math.MathTask.Operation;

public class Main {
    /**
     * @return —Ç–µ—Å—Ç—ã –≤ {@link Map}, –≥–¥–µ
     *         –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ {@link String}
     *         –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–∞–º —Ç–µ—Å—Ç {@link Quiz}
     */
    static Map<String, Quiz> getQuizMap() {
        HashMap<String, Quiz> qmap = new HashMap<>();

        qmap.put("Pool with duplicates", new Quiz(
                new PoolTaskGenerator<>(
                        true,
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π ü§ì?", "–ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π ü§°?", "–¢—ã"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üòé?", "dilik14")),
                5));

        qmap.put("Pool without duplicates", new Quiz(
                new PoolTaskGenerator<>(
                        false,
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π ü¶Ü?", "–£—Ç–∫–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üêÑ?", "–ö–æ—Ä–æ–≤–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üêµ?", "–û–±–µ–∑—å—è–Ω–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üêß?", "–ü–∏–Ω–≥–≤–∏–Ω")

                ), 3));

        qmap.put("Expression",
                new Quiz(new ExpressionTaskGenerator(-5, 5, EnumSet.of(Operation.ADDITION, Operation.DIVISION)), 3));

        qmap.put("Equation",
                new Quiz(new EquationTaskGenerator(-5, 5,
                        EnumSet.of(Operation.SUBTRACTION, Operation.MULTIPLICATION, Operation.DIVISION)), 3));

        qmap.put("Group", new Quiz(new GroupTaskGenerator<>(
                new PoolTaskGenerator<>(
                        true,
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π ü§ì?", "–ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π ü§°?", "–¢—ã"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üòé?", "dilik14")),
                new PoolTaskGenerator<>(
                        false,
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π ü¶Ü?", "–£—Ç–∫–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üêÑ?", "–ö–æ—Ä–æ–≤–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üêµ?", "–û–±–µ–∑—å—è–Ω–∞"),
                        new TextTask("–ö—Ç–æ —Ç–∞–∫–æ–π üêß?", "–ü–∏–Ω–≥–≤–∏–Ω")),
                new ExpressionTaskGenerator(-5, 5, EnumSet.of(Operation.ADDITION, Operation.DIVISION)),
                new EquationTaskGenerator(-5, 5,
                        EnumSet.of(Operation.SUBTRACTION, Operation.MULTIPLICATION, Operation.DIVISION))),
                4));

        qmap.put("Deadline", new Quiz(new DeadLineTaskGenerator(-5, 10), 5));

        return qmap;
    }

    public static void main(String[] args) {
        Map<String, Quiz> quizMap = getQuizMap();
        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ãüòä:");
        quizMap.keySet().forEach(System.out::println);

        Scanner scanner = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞üòò:");
        String testName = scanner.nextLine();

        while (!quizMap.containsKey(testName)) {
            System.out.println("–¢–∞–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüòî. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:");
            testName = scanner.nextLine();
        }
        Quiz quiz = quizMap.get(testName);

        while (!quiz.isFinished()) {
            System.out.println(quiz.nextTask().getText());
            String answer = scanner.nextLine();
            Result result = quiz.provideAnswer(answer);

            System.out.println(switch (result) {
                case OK -> "OK üò¥";
                case WRONG -> "WA üòàüòàüòà";
                case INCORRECT_INPUT -> "–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π üò†üò†üò†";
            });
        }
        scanner.close();
        System.out.println("–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞üòú: " + quiz.getMark());
    }
}
